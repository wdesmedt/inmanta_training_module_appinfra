import app
import appinfra::providers
import appinfra::vars
import ip
import openstack
import redhat
import ssh
import platform

### Layer 1
################
entity AppService:
    """
        This entity models the application service offered to the end user.

        :attr network: The network range from which we will allocated IP ranges for each site and tier
        :attr prefix_length: The size of the networks to allocate expressed in the number of bits
        :attr networks_per_site: The number of networks per site to allocate
    """
    ip::cidr network_address
    number prefix_length=24
    number networks_per_site=8
end

implement AppService using std::none

### Layer 2
################
entity Site:
    """
        A site where the application is deployed
    """
    string name
    tier_n api_instances=1
    tier_n backend_instances=1
    tier_n state_instances=1
    ip::cidr network_address
    number site_index    
end

index Site(name)
index Site(site_index)

AppService.sites [1:] -- Site.app_service [1]
"""
    Each app is hosted on one or more sites.
"""

entity OpenstackSite extends Site:

end

OpenstackSite.router [1] -- openstack::Router
OpenstackSite.security_group [1] -- openstack::SecurityGroup

### Layer 3
################
typedef tier_n as number matching self > 0
typedef tier_type as string matching self == "api" or self == "backend" or self == "state"

entity Tier:
    """
        An application tier at a specific site
    """
    string name
    tier_type type
    tier_n n_instances
    ip::cidr network_address
end

index Tier(site, type)

Site.tiers [0:] -- Tier.site [1]
Site.api_tier [1] -- Tier
Site.backend_tier [1] -- Tier
Site.state_tier [1] -- Tier

Tier.apps [0:] -- app::App
"""
    A list of all application instances in this tier
"""

entity OpenstackTier extends Tier:

end

OpenstackTier.subnet [1] -- openstack::Subnet
OpenstackTier.network [1] -- openstack::Network

### Layer 4
################
entity Host extends ip::Host:
    """
        This entity models a host (vm) for this application. This host will provision a virtual 
        machine on the target site (openstack, aws, ..)
    """
    ip::ip? public_ip
end

# Many modules depend on special hosts implementations. If you create an
# std::Host or ip::Host subclass, use the std::hostDefaults implementation.
implement Host using std::hostDefaults

Host.tier [1] -- Tier.instances [0:]
Host.os_vm [0:1] -- openstack::VirtualMachine

### Implementations
implementation site for Site:
    self.network_address = appinfra::calc_site_network(self)
end

implementation openstackTiers for OpenstackSite:
    self.api_tier = OpenstackTier(site=self, type="api", n_instances=self.api_instances, 
                                  network_address=appinfra::calc_tier_network(self, 0))
    self.backend_tier = OpenstackTier(site=self, type="backend", n_instances=self.backend_instances, 
                                      network_address=appinfra::calc_tier_network(self, 1))
    self.state_tier = OpenstackTier(site=self, type="state", n_instances=self.state_instances, 
                                    network_address=appinfra::calc_tier_network(self, 2))

    self.router = openstack::Router(provider=appinfra::providers::os_provider, project=appinfra::providers::os_project,
                                    name="router-app-{{ self.name }}", ext_gateway=appinfra::providers::os_uplink)

    # Create a basic security group that all VMs in this site should use
    sg_base = openstack::SecurityGroup(provider=appinfra::providers::os_provider, project=appinfra::providers::os_project, name="app_base", description="Base")
    openstack::IPrule(group=sg_base, direction="egress", ip_protocol="all", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_base, direction="ingress", ip_protocol="icmp", remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_base, direction="ingress", ip_protocol="tcp", port=1234, remote_prefix="0.0.0.0/0")
    openstack::IPrule(group=sg_base, direction="ingress", ip_protocol="tcp", port=22,
                      remote_prefix="0.0.0.0/0")

    self.security_group = sg_base
end

implementation appConnections for Site:
    """
        Add the connections between tiers based on the following rules:

        - each api connects to all backend in same site
        - each backend connects to all state in same site
        - each state connects to each state in all sites
    """
    for app in self.api_tier.apps:
        app.connects_to = self.backend_tier.apps
    end

    for app in self.backend_tier.apps:
        app.connects_to = self.state_tier.apps
    end

    for app in self.state_tier.apps:
        for other in self.state_tier.apps:
            app.connects_to = other
        end
        for site in self.app_service.sites:
            for other in site.state_tier.apps:
                app.connects_to = other
            end
        end
    end
end

implement Site using site, appConnections
implement OpenstackSite using parents
implement OpenstackSite using openstackTiers

implementation tier for Tier:
    self.name = "{{ site.name }}-{{ type }}"
    for i in std::sequence(self.n_instances, 1):
        Host(name="{{ name }}-vm-{{ i }}", tier=self)
    end
end

implementation openstackTier for OpenstackTier:
    self.network = openstack::Network(provider=appinfra::providers::os_provider, project=appinfra::providers::os_project, name=self.name)
    self.subnet = openstack::Subnet(provider=appinfra::providers::os_provider, project=appinfra::providers::os_project, name=self.name, network=self.network,
                                     dhcp=true, network_address=self.network_address, router=self.site.router,
                                     dns_servers=appinfra::vars::dns_servers)
end

implement Tier using tier
implement OpenstackTier using parents
implement OpenstackTier using openstackTier

implementation hostBase for Host:
    self.os = redhat::centos7
    self.tier.apps = app::App(host=self, site=self.tier.site.name, tier=self.tier.name, name=self.name)
end

implementation openstackAPIHost for Host:
    # Add a floating ip
    fip = openstack::FloatingIP(provider=appinfra::providers::os_provider, project=appinfra::providers::os_project,
                                external_network=appinfra::providers::os_uplink, port=self.os_vm.eth0_port)
    self.public_ip = std::getfact(fip, "ip_address")
end

implementation openstackHost for Host:
    self.os_vm = openstack::VirtualMachine(name=self.name, key_pair=appinfra::vars::mgmt_key, 
                                           provider=appinfra::providers::os_provider, project=appinfra::providers::os_project,
                                           image=appinfra::providers::os_image, flavor=appinfra::providers::os_flavor,
                                           security_groups=self.tier.site.security_group)

    platform::UserdataBootstrap(vm=self.os_vm)
    self.os_vm.eth0_port = openstack::HostPort(provider=appinfra::providers::os_provider, project=appinfra::providers::os_project,
                                               vm=self.os_vm, subnet=self.tier.subnet, name="{{ name }}_eth0", port_index=1,
                                               address=std::getfact(self.os_vm, "ip_address"))
    self.ip = self.os_vm.eth0_port.address
end

implement Host using hostBase
implement Host using openstackAPIHost when std::is_instance(self.tier, "appinfra::OpenstackTier") and self.tier.type == "api"
implement Host using openstackHost when std::is_instance(self.tier, "appinfra::OpenstackTier")